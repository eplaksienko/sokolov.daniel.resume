https://leetcode.com/problems/add-strings/

class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        l1 = len(num1) - 1
        l2 = len(num2) - 1
        carry = 0;
        sum = "";
        while l1 >= 0 or l2 >=0:
            d1 = 0
            d2 = 0
            if l1>=0:
                d1 = int(num1[l1])
            if l2>=0:
                d2 = int(num2[l2])
            d = carry+d1+d2
            carry = int(d/10)
            d = int(d % 10)
            sum += str(d)
            l1 -= 1
            l2 -= 1
    
        if carry==1:
            sum+=str(1)
            
        return sum[::-1]
	
class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        str1 = list(num1)
        str2 = list(num2)
        multi = 1
        amount = 0
        while str1 or str2:
            val1 = val2 = 0
            if str1:
                val1 = int(str1.pop())
            if str2:
                val2 = int(str2.pop())
            amount += (val1 + val2) * multi
            multi *= 10
        return "{}".format(amount)	
		

public class Solution {
    public string AddStrings(string num1, string num2) {
        
        int carry = 0;
        
        int len = Math.Max(num1.Length, num2.Length);
        
        var sum = new StringBuilder();
        for(int i=0; i<len;i++){
            int d1 = 0;
            int d2 = 0;
            int i1 = num1.Length-1-i;
            int i2 = num2.Length-1-i;
            if(i1>=0){
                d1 = num1[i1]-'0';
            }
            if(i2>=0){
                d2 = num2[i2]-'0';
            }
            int d = d1+d2+carry;
            carry = 0;
            if(d>9){
                carry=1;
                d-=10;
            }
            sum.Append(d.ToString());
        }
        if(carry==1){
            sum.Append(1.ToString());
        }
        
        return new string(sum.ToString().Reverse().ToArray());
        
    }
}

https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/
class Solution:
    def numPairsDivisibleBy60(self, time: List[int]) -> int:
        freq = [0]*60
        cnt = 0;
        for t in time:
            modt = t%60
            if modt==0:
                cnt+=freq[0]
            else:
                cnt+=freq[60-modt]
            
            freq[modt] = freq[modt]+1
        
        return cnt


public class Solution {
    public int NumPairsDivisibleBy60(int[] time)     
    {
        var freq = new int[60];        
        int cnt=0;
        foreach(var t in time){
            var modt = t%60;
            if(modt==0){
                cnt+=freq[0];
            }else{
                cnt+=freq[60-modt];
            }
            
            freq[modt]++;
        }
        
        return cnt;
    }
}        
